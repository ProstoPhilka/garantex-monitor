// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GarantexMonitorClient is the client API for GarantexMonitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GarantexMonitorClient interface {
	GetRates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRatesResponse, error)
}

type garantexMonitorClient struct {
	cc grpc.ClientConnInterface
}

func NewGarantexMonitorClient(cc grpc.ClientConnInterface) GarantexMonitorClient {
	return &garantexMonitorClient{cc}
}

func (c *garantexMonitorClient) GetRates(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRatesResponse, error) {
	out := new(GetRatesResponse)
	err := c.cc.Invoke(ctx, "/gmongrpc.GarantexMonitor/GetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GarantexMonitorServer is the server API for GarantexMonitor service.
// All implementations must embed UnimplementedGarantexMonitorServer
// for forward compatibility
type GarantexMonitorServer interface {
	GetRates(context.Context, *emptypb.Empty) (*GetRatesResponse, error)
	mustEmbedUnimplementedGarantexMonitorServer()
}

// UnimplementedGarantexMonitorServer must be embedded to have forward compatible implementations.
type UnimplementedGarantexMonitorServer struct {
}

func (UnimplementedGarantexMonitorServer) GetRates(context.Context, *emptypb.Empty) (*GetRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedGarantexMonitorServer) mustEmbedUnimplementedGarantexMonitorServer() {}

// UnsafeGarantexMonitorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GarantexMonitorServer will
// result in compilation errors.
type UnsafeGarantexMonitorServer interface {
	mustEmbedUnimplementedGarantexMonitorServer()
}

func RegisterGarantexMonitorServer(s *grpc.Server, srv GarantexMonitorServer) {
	s.RegisterService(&_GarantexMonitor_serviceDesc, srv)
}

func _GarantexMonitor_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GarantexMonitorServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gmongrpc.GarantexMonitor/GetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GarantexMonitorServer).GetRates(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _GarantexMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gmongrpc.GarantexMonitor",
	HandlerType: (*GarantexMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _GarantexMonitor_GetRates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/garantex-monitor.proto",
}
